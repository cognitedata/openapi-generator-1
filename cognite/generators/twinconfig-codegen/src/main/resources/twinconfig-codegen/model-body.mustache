{{#models}}{{#model}}{{^isEnum}}// This is auto-generated code based on Twin configuration OpenAPI!
// DO NOT MODIFY THIS C++ FILE DIRECTLY!

#include "{{classFilename}}.h"

#include "Json.h"
#include "JsonUtilities.h"

{{#discriminator}}
{{#imports}}
#include "{{.}}.h"
{{/imports}}
{{/discriminator}}

TSharedPtr<{{classname}}> {{classname}}::ConstructFromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
{{#discriminator}}
	FString {{propertyName}};
	if ( TryGetField(JsonObject, TEXT("{{propertyName}}"), {{propertyName}}) )
	{
		{{#mappedModels}}
		if ( {{propertyName}} == "{{mappingName}}" )
		{
			TSharedPtr<{{modelName}}> RetVal = MakeShareable(new {{modelName}}());
			if ( RetVal->InitFromJson(JsonObject) )
			{
				return RetVal;
			}
		}
		else
		{
			UE_LOG(LogTemp, Warning, TEXT("{{classname}}::ConstructFromJson {{propertyName}} != {{mappingName}}"));
		}
		{{/mappedModels}}
	}
	else
	{
		UE_LOG(LogTemp, Warning, TEXT("{{classname}}::ConstructFromJson TryGetField {{propertyName}} failed"));
	}
{{/discriminator}}
{{^discriminator}}
	TSharedPtr<{{classname}}> RetVal = MakeShareable(new {{classname}}());
	if ( RetVal->InitFromJson(JsonObject) )
	{
		return RetVal;
	}
{{/discriminator}}
	return nullptr;
}

bool {{classname}}::InitFromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	const bool bSuccess = {{^parent}}true{{/parent}}{{#parent}}{{parent}}::InitFromJson(JsonObject){{/parent}}{{#vars}}{{#required}}{{^isEnum}}
			&& TryGetField(JsonObject, TEXT("{{name}}"), {{name}}){{/isEnum}}{{#isEnum}}
			&& TRY_GET_JSON_ENUM_FIELD({{dataType}}, JsonObject, TEXT("{{name}}"), {{name}}){{/isEnum}}{{/required}}{{/vars}}
			;
	if (!bSuccess)
		return false;
	{{#vars}}{{^required}}{{^isEnum}}
	TryGetOptionalField(JsonObject, TEXT("{{name}}"), {{name}});{{/isEnum}}{{#isEnum}}
	TRY_GET_OPTIONAL_JSON_ENUM_FIELD({{dataType}}, JsonObject, TEXT("{{name}}"), {{name}});{{/isEnum}}{{/required}}{{/vars}}

	return true;
}

TSharedRef<FJsonValue> {{classname}}::SerializeToJson() const
{
	{{^parent}}TSharedRef<FJsonObject> JsonObject = MakeJsonObject();{{/parent}}{{#parent}}TSharedRef<FJsonObject> JsonObject = {{parent}}::SerializeToJson()->AsObject().ToSharedRef();{{/parent}}
	{{#vars}}{{#required}}{{^isEnum}}
	SetField(JsonObject, TEXT("{{name}}"), {{name}});{{/isEnum}}{{#isEnum}}
	SET_JSON_ENUM_FIELD({{dataType}}, JsonObject, TEXT("{{name}}"), {{name}});{{/isEnum}}{{/required}}{{/vars}}
	{{#vars}}{{^required}}{{^isEnum}}
	SetField(JsonObject, TEXT("{{name}}"), {{name}});{{/isEnum}}{{#isEnum}}
	SET_OPTIONAL_JSON_ENUM_FIELD({{dataType}}, JsonObject, TEXT("{{name}}"), {{name}});{{/isEnum}}{{/required}}{{/vars}}
	
	return ToValueObject(JsonObject);
}
{{/isEnum}}{{/model}}{{/models}}