#pragma once

{{#imports}}
{{{import}}}
{{/imports}}

/** \defgroup Operations API Endpoints
 *  Classes containing all the functions for calling API endpoints
 *
 */


{{#operations}}
/** \addtogroup {{{baseName}}} {{{baseName}}}
 * \ingroup Operations
 *  @{
 */
class {{classname}}
{
public:
	{{#operation}}
/*! \brief {{{summary}}}.
 *
 * {{{notes}}}{{#allParams}}
 * \param {{paramName}} {{{description}}}{{#required}} *Required*{{/required}}{{/allParams}}
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool {{nickname}}(char * accessToken,
	{{#allParams}}{{#isContainer}}{{{dataType}}}<{{baseType}}> {{paramName}}{{/isContainer}}{{^isContainer}}{{{dataType}}} {{paramName}}{{/isContainer}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#hasParams}}, {{/hasParams}}
	{{#returnType}}const TFunction< void({{#returnContainer}}{{#isListContainer}}{{returnType}}<{{returnBaseType}}>{{/isListContainer}}{{#isMapContainer}}{{returnType}}<FString,FString>{{/isMapContainer}}{{/returnContainer}}{{^returnContainer}}{{returnType}}{{/returnContainer}}) >& Callback{{/returnType}}
	);


	{{/operation}}

	static std::string getBasePath()
	{
		return "{{{basePath}}}";
	}
};
/** @}*/

{{/operations}}
