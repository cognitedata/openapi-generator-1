{{#models}}{{#model}}
{{^isEnum}}
#include "Json.h"
#include "JsonUtilities.h"

#include "{{classFilename}}.h"

{{#discriminator}}
{{#imports}}
#include "{{.}}.h"
{{/imports}}
{{/discriminator}}

{{#discriminator}}
TSharedPtr<{{classname}}> {{classname}}::ConstructFromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	if ( TryGetField(JsonObject, TEXT("{{propertyName}}"), {{propertyName}}) )
	{
		{{#mappedModels}}
		if ( {{propertyName}} == "{{mappingName}}" )
		{
			TSharedPtr<{{modelName}}> RetVal = MakeShareable(new {{modelName}}());
			if ( RetVal->InitFromJson(JsonObject) )
			{
				return RetVal;
			}
		}
		{{/mappedModels}}
	}
	return nullptr;
}
{{/discriminator}}

bool {{classname}}::InitFromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	const bool bSuccess = true && Super::InitFromJson(JsonObject)
	{{#vars}}{{#required}}
		{{^isEnum}}
		&& TryGetField(JsonObject, TEXT("{{name}}"), {{name}})
		{{/isEnum}}
		{{#isEnum}}
		&& TRY_GET_JSON_ENUM_FIELD({{dataType}}, JsonObject, TEXT("{{name}}"), {{name}})
		{{/isEnum}}
	{{/required}}{{/vars}}
		;
	
	if (!bSuccess)
		return false;

	{{#vars}}{{^required}}
		{{^isEnum}}
	TryGetOptionalField(JsonObject, TEXT("{{name}}"), {{name}});
		{{/isEnum}}
		{{#isEnum}}
	TRY_GET_JSON_ENUM_FIELD({{dataType}}, JsonObject, TEXT("{{name}}"), {{name}})
		{{/isEnum}}
	{{/required}}{{/vars}}

	return true;
}

void {{classname}}::SerializeToJson(TSharedPtr<FJsonObject>& OutJsonObject) const
{
	Super::SerializeToJson(OutJsonObject)

	{{#vars}}
	SetField(OutJsonObject, TEXT("{{name}}"), {{name}});
	{{/vars}}
}



{{/isEnum}}
{{/model}}
{{/models}}

